# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gkdL5ejAGGF-9vPHrS6G3CoobLU4az43
"""

#Import the numpy package under the name np (★☆☆)
import numpy as np

#Print the numpy version and the configuration (★☆☆)
print(np.__version__)
print(np.show_config())

#Create a null vector of size 10 (★☆☆)
null_vector = np.zeros(10)
print(null_vector)

#How to find the memory size of any array (★☆☆)
array = np.zeros((10, 10))
print(array.size * array.itemsize)

#How to get the documentation of the numpy add function from the command line? (★☆☆)
help(np.add)

#Create a null vector of size 10 but the fifth value which is 1 (★☆☆)
null_vector = np.zeros(10)
null_vector[4] = 1
print(null_vector)

#Create a vector with values ranging from 10 to 49 (★☆☆)
vector = np.arange(10, 50)
print(vector)

#Reverse a vector (first element becomes last) (★☆☆)
vector = np.arange(10, 50)
reversed_vector = np.flip(vector)
print(reversed_vector)

#Create a 3x3 matrix with values ranging from 0 to 8 (★☆☆)
matrix = np.arange(9).reshape(3, 3)
print(matrix)

#Find indices of non-zero elements from [1,2,0,0,4,0] (★☆☆)
array = np.array([1, 2, 0, 0, 4, 0])
nonzero_indices = np.nonzero(array)
print(nonzero_indices)

#Create a 3x3 identity matrix (★☆☆)
identity_matrix = np.eye(3)
print(identity_matrix)

#Create a 3x3x3 array with random values (★☆☆)
random_array = np.random.random((3, 3, 3))
print(random_array)

#Create a 10x10 array with random values and find the minimum and maximum values (★☆☆)
array = np.random.random((10, 10))
minimum_value = np.min(array)
maximum_value = np.max(array)
print("Minimum:", minimum_value)
print("Maximum:", maximum_value)

#Create a random vector of size 30 and find the mean value (★☆☆)
vector = np.random.random(30)
mean_value = np.mean(vector)
print(mean_value)

#Create a 2d array with 1 on the border and 0 inside (★☆☆)
array = np.ones((5, 5))
array[1:-1, 1:-1] = 0
print(array)

#How to add a border (filled with 0's) around an existing array? (★☆☆)
array = np.ones((5, 5))
array = np.pad(array, pad_width=1, mode='constant', constant_values=0)
print(array)

#What is the result of the following expression? (★☆☆)
print(0 * np.nan)           # nan
print(np.nan == np.nan)     # False
print(np.inf > np.nan)      # False
print(np.nan - np.nan)      # nan
print(np.nan in set([np.nan]))   # True
print(0.3 == 3 * 0.1)       # False

#Create a 5x5 matrix with values 1,2,3,4 just below the diagonal (★☆☆)
matrix = np.diag(1 + np.arange(4), k=-1)
print(matrix)

#Create a 8x8 matrix and fill it with a checkerboard pattern (★☆☆)
matrix = np.zeros((8, 8), dtype=int)
matrix[1::2, ::2] = 1
matrix[::2, 1::2] = 1
print(matrix)

#Consider a (6, 7, 8) shape array, what is the index (x, y, z) of the 100th element? (★☆☆)
shape = (6, 7, 8)
index = np.unravel_index(99, shape)
print(index)

#Create a checkerboard 8x8 matrix using the tile function (★☆☆)
matrix = np.tile([[0, 1], [1, 0]], (4, 4))
print(matrix)

#Normalize a 5x5 random matrix (★☆☆)
matrix = np.random.random((5, 5))
normalized_matrix = (matrix - np.mean(matrix)) / np.std(matrix)
print(normalized_matrix)

#Create a custom dtype that describes a color as four unsigned bytes (RGBA) (★☆☆)
color_dtype = np.dtype([('R', np.ubyte),
                       ('G', np.ubyte),
                       ('B', np.ubyte),
                       ('A', np.ubyte)])
print(color_dtype)

#Multiply a 5x3 matrix by a 3x2 matrix (real matrix product) (★☆☆)
matrix1 = np.random.random((5, 3))
matrix2 = np.random.random((3, 2))
matrix_product = np.dot(matrix1, matrix2)
print(matrix_product)

#Given a 1D array, negate all elements which are between 3 and 8 (★☆☆)
array = np.arange(11)
array[(array > 3) & (array < 8)] *= -1
print(array)

#What is the output of the following script? (★☆☆)
print(sum(range(5), -1))
from numpy import *
print(sum(range(5), -1))

#Consider an integer vector Z, which of these expressions are legal? (★☆☆)
Z = np.arange(5)
print(Z ** Z)      # Legal and raises each element to its corresponding power
print(2 << Z >> 2) # Legal and bitwise shift operations
print(Z < -Z)      # Legal and element-wise comparison
print(1j * Z)      # Legal and multiplies each element by a complex number
print(Z / 1 / 1)   # Legal and performs division operations
print(Z < Z > Z)   # Illegal since it combines two comparisons without parentheses

#What are the result of the following expressions? (★☆☆)
print(np.array(0) / np.array(0))
print(np.array(0) // np.array(0))
print(np.array([np.nan]).astype(int).astype(float))  # [-9223372036854775808.]

#How to round away from zero a float array ? (★☆☆)
array = np.random.uniform(-10, 10, 10)
rounded_array = np.copysign(np.ceil(np.abs(array)), array)
print(rounded_array)

#How to find common values between two arrays? (★☆☆)
array1 = np.random.randint(0, 10, 10)
array2 = np.random.randint(0, 10, 10)
common_values = np.intersect1d(array1, array2)
print(common_values)

#How to ignore all numpy warnings (not recommended)? (★☆☆)
np.seterr(all='ignore')

#Is the following expressions true? (★☆☆)
print(np.sqrt(-1) == np.emath.sqrt(-1))

#How to get the dates of yesterday, today and tomorrow? (★☆☆)
yesterday = np.datetime64('today', 'D') - np.timedelta64(1, 'D')
today = np.datetime64('today', 'D')
tomorrow = np.datetime64('today', 'D') + np.timedelta64(1, 'D')
print("Yesterday:", yesterday)
print("Today:", today)
print("Tomorrow:", tomorrow)

#How to get all the dates corresponding to the month of July 2016? (★★☆)
dates = np.arange('2016-07', '2016-08', dtype='datetime64[D]')
print(dates)

#ow to compute ((A+B)\*(-A/2)) in place (without copy)? (★★☆)
A = np.ones(3)
B = np.ones(3) * 2
np.add(A, B, out=B)
np.divide(A, 2, out=A)
np.negative(A, out=A)
np.multiply(A, B, out=A)
print(A)

#Extract the integer part of a random array of positive numbers using 4 different methods (★★☆)
array = np.random.uniform(0, 10, 10)
integer_part1 = array.astype(int)
integer_part2 = np.floor(array)
integer_part3 = np.trunc(array)
integer_part4 = np.ceil(array) - 1
print(integer_part1)
print(integer_part2)
print(integer_part3)
print(integer_part4)

#Create a 5x5 matrix with row values ranging from 0 to 4 (★★☆)
matrix = np.zeros((5, 5))
matrix += np.arange(5)
print(matrix)

#Consider a generator function that generates 10 integers and use it to build an array (★☆☆)
def generator():
    for i in range(10):
        yield i

array = np.fromiter(generator(), dtype=int)
print(array)

#Create a vector of size 10 with values ranging from 0 to 1, both excluded (★★☆)
vector = np.linspace(0, 1, 11, endpoint=False)[1:]
print(vector)

#Create a random vector of size 10 and sort it (★★☆)
vector = np.random.random(10)
sorted_vector = np.sort(vector)
print(sorted_vector)

#How to sum a small array faster than np.sum? (★★☆)
array = np.arange(10)
sum_value = np.add.reduce(array)
print(sum_value)

#Consider two random array A and B, check if they are equal (★★☆)
A = np.random.randint(0, 2, 5)
B = np.random.randint(0, 2, 5)
equal = np.allclose(A, B)
print(equal)

#Make an array immutable (read-only) (★★☆)
array = np.zeros(10)
array.flags.writeable = False

#Consider a random 10x2 matrix representing cartesian coordinates, convert them to polar coordinates (★★☆)
cartesian = np.random.random((10, 2))
x, y = cartesian[:, 0], cartesian[:, 1]
radius = np.sqrt(x**2 + y**2)
angle = np.arctan2(y, x)
print(radius)
print(angle)

#Create random vector of size 10 and replace the maximum value by 0 (★★☆)
vector = np.random.random(10)
vector[np.argmax(vector)] = 0
print(vector)

# Create a structured array with x and y coordinates covering the [0,1]x[0,1] area (★★☆)
structured_array = np.zeros((5, 5), [('x', float), ('y', float)])
structured_array['x'], structured_array['y'] = np.meshgrid(np.linspace(0, 1, 5),
                                                          np.linspace(0, 1, 5))
print(structured_array)

#Given two arrays, X and Y, construct the Cauchy matrix C (Cij = 1/(xi - yj)) (★★☆)
X = np.arange(8)
Y = X + 0.5
C = 1.0 / np.subtract.outer(X, Y)
print(C)

#Print the minimum and maximum representable value for each numpy scalar type (★★☆)
for dtype in [np.int8, np.int16, np.int32, np.int64]:
    print(np.iinfo(dtype).min)
    print(np.iinfo(dtype).max)
for dtype in [np.float16, np.float32, np.float64]:
    print(np.finfo(dtype).min)
    print(np.finfo(dtype).max)
    print(np.finfo(dtype).eps)

#How to print all the values of an array? (★★☆)
np.set_printoptions(threshold=np.inf)

#How to find the closest value (to a given scalar) in a vector? (★★☆)
vector = np.arange(100)
value = np.random.uniform(0, 100)
closest_value = vector[(np.abs(vector - value)).argmin()]
print(closest_value)

#Create a structured array representing a position (x,y) and a color (r,g,b) (★★☆)
position = np.zeros(10, [('position', [('x', float),
                                       ('y', float)]),
                         ('color', [('r', float),
                                    ('g', float),
                                    ('b', float)])])
print(position)

#Consider a random vector with shape (100,2) representing coordinates, find point by point distances (★★☆)
vector = np.random.random((100, 2))
x, y = np.atleast_2d(vector[:, 0]), np.atleast_2d(vector[:, 1])
distance = np.sqrt((x - x

.T)**2 + (y - y.T)**2)
print(distance)

#How to convert a float (32 bits) array into an integer (32 bits) in place?
array = np.arange(10, dtype=np.float32)
array = array.astype(np.int32, copy=False)
print(array)

#How to read the following file? (★★☆)
np.genfromtxt("file.txt")

#What is the equivalent of enumerate for numpy arrays? (★★☆)
array = np.array([1, 2, 3, 4])
for index, value in np.ndenumerate(array):
    print(index, value)

#Generate a generic 2D Gaussian-like array (★★☆)
x, y = np.meshgrid(np.linspace(-1, 1, 10), np.linspace(-1, 1, 10))
d = np.sqrt(x*x + y*y)
sigma, mu = 1.0, 0.0
gaussian = np.exp(-( (d-mu)**2 / ( 2.0 * sigma**2 ) ) )
print(gaussian)

#How to randomly place p elements in a 2D array? (★★☆)
p = 3
array = np.zeros((10, 10))
np.put(array, np.random.choice(range(10*10), p, replace=False), 1)
print(array)

#Subtract the mean of each row of a matrix (★★☆)
matrix = np.random.rand(5, 10)
matrix -= matrix.mean(axis=1, keepdims=True)
print(matrix)

#How to sort an array by the nth column? (★★☆)
array = np.random.randint(0, 10, (3, 3))
sorted_array = array[array[:, 1].argsort()]
print(sorted_array)

#How to tell if a given 2D array has null columns? (★★☆)
array = np.random.randint(0, 3, (3, 10))
null_columns = np.any(array, axis=0)
print(null_columns)

#Find the nearest value from a given value in an array (★★☆)
array = np.random.uniform(0, 1, 10)
value = 0.5
nearest_value = array[(np.abs(array - value)).argmin()]
print(nearest_value)

#Considering two arrays with shape (1,3) and (3,1), how to compute their sum using an iterator? (★★☆)
A = np.arange(3).reshape(1, 3)
B = np.arange(3).reshape(3, 1)
iterator = np.nditer([A, B, None])
for x, y, z in iterator:
    z[...] = x + y
print(iterator.operands[2])

#Create an array class that has a name attribute (★★☆)
class NamedArray(np.ndarray):
    def __new__(cls, array, name="No Name"):
        obj = np.asarray(array).view(cls)
        obj.name = name
        return obj

    def __array_finalize__(self, obj):
        if obj is None:
            return
        self.name = getattr(obj, 'name', 'No Name')

array = NamedArray(np.arange(10), "My Array")
print(array.name)

#Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)? (★★★)

vector = np.ones(10)
indices = np.random.choice(range(10), 5, replace=False)
vector += np.bincount(indices, minlength=len(vector))
print(vector)

#How to accumulate elements of a vector (X) to an array (F) based on an index list (I)? (★★★)
X = [1, 2, 3, 4, 5, 6]
I = [1, 3, 9, 3, 4, 1]
F = np.bincount(I, X)
print(F)

#Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors (★★★)
image = np.random.randint(0, 2, (16, 16, 3)).astype(np.ubyte)
colors = np.unique(image.reshape(-1, 3), axis=0)
num_colors = len(colors)
print(num_colors)

#Considering a four dimensions array, how to get sum over the last two axis at once? (★★★)
array = np.random.randint(0, 10, (3, 4, 5, 6))
sum_last_two_axes = array.sum(axis=(-2, -1))
print(sum_last_two_axes)

#Considering a one-dimensional vector D, how to compute means of subsets of D using a vector S of same size describing subset indices? (★★★)
D = np.random.uniform(0, 1, 100)
S = np.random.randint(0, 10, 100)
mean_values = np.bincount(S, weights=D) / np.bincount(S)
print(mean_values)

#How to get the diagonal of a dot product? (★★★)
A = np.random.uniform(0, 1, (5, 5))
B = np.random.uniform(0, 1, (5, 5))
dot_product = np.diag(np.dot(A, B))
print(dot_product)

#Consider the vector \[1, 2, 3, 4, 5\], how to build a new vector with 3 consecutive zeros interleaved between each value? (★★★)
vector = np.array([1, 2, 3, 4, 5])
zeros_interleaved = np.zeros(len(vector) + (len(vector)-1)*3)
zeros_interleaved[::4] = vector
print(zeros_interleaved)

#Consider an array of dimension (5,5,3), how to mulitply it by an array with dimensions (5,5)? (★★★)
array1 = np.ones((5, 5, 3))
array2 = 2*np.ones((5, 5))
multiplication = array1 * array2[:, :, None]
print(multiplication)

#How to swap two rows of an array? (★★★)
array = np.arange(25).reshape(5, 5)
array[[0, 1]] = array[[1, 0]]
print(array)

#Consider a set of 10 triplets describing 10 triangles (with shared vertices), find the set of unique line segments composing all the triangles (★★★)
triangles = np.random.randint(0, 100, (10, 3))
lines = np.roll(triangles.repeat(2, axis=1), -1, axis=1)
lines = lines.reshape(len(lines

)*3, 2)
lines = np.sort(lines, axis=1)
unique_lines = np.unique(lines, axis=0)
print(unique_lines)

#Given an array C that is a bincount, how to produce an array A such that np.bincount(A) == C? (★★★)
C = np.bincount([1, 1, 2, 3, 4, 4, 6])
A = np.repeat(np.arange(len(C)), C)
print(A)

#How to compute averages using a sliding window over an array? (★★★)
array = np.arange(10)
window_size = 3
averages = np.convolve(array, np.ones(window_size), 'valid') / window_size
print(averages)

#Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z\[0\],Z\[1\],Z\[2\]) and each subsequent row is shifted by 1 (last row should be (Z\[-3\],Z\[-2\],Z\[-1\]) (★★★)

Z = np.arange(10)
window_size = 3
array = np.lib.stride_tricks.sliding_window_view(Z, window_shape=(window_size,))
print(array)

#How to negate a boolean, or to change the sign of a float inplace? (★★★)
boolean = np.random.choice([True, False], 10)
np.logical_not(boolean, out=boolean)

float_number = np.random.uniform(-1.0, 1.0, 10)
np.negative(float_number, out=float_number)

#Consider 2 sets of points P0, P1 describing lines (2d) and a point p, how to compute distance from p to each line i (P0\[i\],P1\[i\])? (★★★)

P0 = np.random.uniform(-10, 10, (10, 2))
P1 = np.random.uniform(-10, 10, (10, 2))
p = np.random.uniform(-10, 10, (1, 2))

def distance(P0, P1, p):
    return np.abs(np.cross(P1 - P0, p - P0) / np.linalg.norm(P1 - P0, axis=1))

distances = distance(P0, P1, p)
print(distances)

#Consider 2 sets of points P0, P1 describing lines (2d) and a set of points P, how to compute distance from each point j (P\[j\]) to each line i (P0\[i\],P1\[i\])? (★★★)
P0 = np.random.uniform(-10, 10, (10, 2))
P1 = np.random.uniform(-10, 10, (10, 2))
P = np.random.uniform(-10, 10, (10, 2))

def distance(P0, P1, P):
    return np.abs(np.cross(P1 - P0, P - P0) / np.linalg.norm(P1 - P0, axis=1, keepdims=True))

distances = distance(P0[:, None, :], P1[:, None, :], P)
print(distances)

#Consider an arbitrary array, write a function that extract a subpart with a fixed shape and centered on a given element (pad with a fill value when necessary) (★★★)

def extract_subpart(array, shape, center, fill=0

):
    subpart = np.full(shape, fill)
    indices = np.array(shape) // 2
    indices = center - indices
    subpart_indices = np.clip(indices, 0, np.array(array.shape) - shape)
    indices = np.clip(indices, -subpart_indices, np.array(array.shape) - shape - subpart_indices)
    slices = tuple(slice(i, i+size) for i, size in zip(indices, shape))
    subpart[tuple(slice(None, size) for size in shape)] = array[slices]
    return subpart

array = np.random.randint(0, 10, (10, 10))
subpart = extract_subpart(array, shape=(5, 5), center=(7, 7), fill=0)
print(subpart)

#Consider an array Z = \[1,2,3,4,5,6,7,8,9,10,11,12,13,14\], generate an array R = \[\[1,2,3,4\], \[2,3,4,5\], \[3,4,5,6\], ..., \[11,12,13,14\]\] (★★★)
Z = np.arange(1, 15, dtype=np.int32)
window_size = 4
R = np.lib.stride_tricks.sliding_window_view(Z, window_shape=(window_size,))
print(R)

#Compute a matrix rank (★★★)
matrix = np.random.randint(0, 2, (3, 3))
rank = np.linalg.matrix_rank(matrix)
print(rank)

#How to find the most frequent value in an array?
array = np.random.randint(0, 10, 50)
most_frequent_value = np.bincount(array).argmax()
print(most_frequent_value)

#Extract all the contiguous 3x3 blocks from a random 10x10 matrix (★★★)
matrix = np.random.randint(0, 10, (10, 10))
shape = (3, 3)
blocks = np.lib.stride_tricks.sliding_window_view(matrix, shape)
print(blocks)

#Create a 2D array subclass such that Z\[i,j\] == Z\[j,i\] (★★★)
class SymmetricArray(np.ndarray):
    def __setitem__(self, index, value):
        i, j = index
        super(SymmetricArray, self).__setitem__((i, j), value)
        super(SymmetricArray, self).__setitem__((j, i), value)

shape = (5, 5)
array = np.zeros(shape)
symmetric_array = SymmetricArray(shape, buffer=array)
symmetric_array[0, 1] = 1
print(symmetric_array)
print(symmetric_array[1, 0])

#Consider a set of p matrices wich shape (n,n) and a set of p vectors with shape (n,1). How to compute the sum of of the p matrix products at once? (result has shape (n,1)) (★★★)
p = 5
n = 3
matrices = np.random.randint(0, 10, (p, n, n))
vectors = np.random.randint(0, 10, (p, n, 1))
result = np.einsum('ijk,ikl->il', matrices, vectors)
print(result)

#Consider a 16x16 array, how to get the block-sum(block size is 4x4)? (★★★)
array = np.ones((16, 16))
block_size = (4, 4)
block_sum = np.sum(np.add.reduceat(np.add.reduceat(array, np.arange(0, array.shape[0], block_size[0]), axis=0), np.arange(0, array.shape[1], block_size[1]), axis=1))
print(block_sum)

#How to implement the Game of Life using numpy arrays? (★★★)
def iterate_life(array):
    neighbors_count = sum(np.roll(np.roll(array, i, 0), j, 1) for i in (-1, 0, 1) for j in (-1, 0, 1) if (i != 0 or j != 0))
    new_array = (neighbors_count == 3) | (array & (neighbors_count == 2))
    return new_array.astype(np.int32)

array = np.random.randint(0, 2, (50, 50))
for _ in range(10):
    array = iterate_life(array)
    print(array)

#How to get the n largest values of an array (★★★)
array = np.random.randint(0, 100, 10)
n_largest_values = np.sort(array)[-n:]
print(n_largest_values)

#Given an arbitrary number of vectors, build the cartesian product (every combinations of every item) (★★★)
vectors = [np.array([1, 2, 3]), np.array([4, 5]), np.array([6, 7])]
cartesian_product = np.transpose([np.tile(np.repeat(vector, len(np.prod(vectors[i+1:], axis=0))), len(np.prod(vectors[:i], axis=0))) for i, vector in enumerate(vectors)])
print(cartesian_product)

#How to create a record array from a regular array? (★★★)
array = np.array([(1, 2, 3.0), (4, 5, 6.0)], dtype=[('x', int), ('y', int), ('z', float)])
record_array = np.rec.array(array)
print(record_array)

#Consider a large vector Z, compute Z to the power of 3 using 3 different methods (★★★)
Z = np.random.randint(0, 10, 1000000)

# Method 1: Using the power operator
result1 = Z**3

# Method 2: Using np.power
result2 = np.power(Z, 3)

# Method 3: Using np.einsum
result3 = np.einsum('i,i,i->i', Z, Z, Z)

print(result1)
print(result2)
print(result3)

# Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B? (★★★)
A = np.random.randint(0, 5, (8, 3))
B = np.random.randint(0, 5, (2, 2))
rows = np.where(np.all(np.isin(A[:, None, :], B), axis=-1))[0]
print(rows)

#Considering a 10x3 matrix, extract rows with unequal values (e.g. \[1,2,3\]) (★★★
matrix = np.random.randint(0, 2

, (10, 3))
rows = matrix[~np.all(matrix[:, 1:] == matrix[:, :-1], axis=1)]
print(rows)

#Convert a vector of ints into a matrix binary representation (★★★)
vector = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
matrix = ((vector[:, None] & (1 << np.arange(8)))) > 0
print(matrix.astype(int))

#Given a two-dimensional array, how to extract unique rows? (★★★)
array = np.random.randint(0, 2, (5, 3))
unique_rows = np.unique(array, axis=0)
print(unique_rows)

#Considering 2 arrays with shape (1,3) and (3,1), how to compute their sum using an iterator? (★★★)
array1 = np.arange(3).reshape(1, 3)
array2 = np.arange(3).reshape(3, 1)

iterator = np.nditer([array1, array2, None])
for a, b, c in iterator:
    c[...] = a + b

result = iterator.operands[2]
print(result)

#Flatten a 2D array in a zigzag pattern (★★★)
array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
zigzag = np.concatenate((array[::2, :].flatten(), array[1::2, :][:, ::-1].flatten()))
print(zigzag)

#How to randomly place p elements in a 2D array? (★★★)
p = 5
array = np.zeros((10, 10))
indices = np.random.choice(range(10*10), p, replace=False)
array.flat[indices] = 1
print(array)

#Subtract the mean of each row of a matrix (★★★)
matrix = np.random.rand(3, 3)
mean_subtracted = matrix - matrix.mean(axis=1, keepdims=True)
print(mean_subtracted)